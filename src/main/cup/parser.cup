package chemistry_checker;

import java_cup.runtime.*;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.Collections;

import java.io.IOException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;


parser code {:
	public static void main(String args[]) throws Exception {
		if (args.length > 0) {
            String input = "";
            for (String s: args) {
                input += s + "; ";
            }
            new parser(new Yylex(new StringReader(input))).parse();
		} else {
		    new parser(new Yylex(new InputStreamReader(new FileInputStream("src/test.txt")))).parse();
        }
	}
:}
action code {:
	public String exprToString(ArrayList<String> expr) {
	    String result = expr.toString();
	    result = result.replace("[", "").replace("]", "").replace(" ,", " + ");
	    return result;
	}

	public String eqnToString(ArrayList<String> l, ArrayList<String> r) {
	    String result = l.toString() + " -> " + r.toString();
	    result = result.replace("[", "").replace("]", "").replace(", ", " + ");
	    return result;
    }

    public String toJSON(String input, String result) throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        ObjectNode node1 = mapper.createObjectNode();
        node1.put("result", result);
        node1.put("input", input);
        return mapper.writeValueAsString(node1);
    }
:}

terminal END, PLUS, TO, LPAREN, RPAREN, ELEMENT, CHARGE, STATE;
terminal Integer NUMBER;

non terminal expr_list, expr_part;
non terminal ArrayList<String> expr;
non terminal String group, molecule;

precedence left PLUS;
precedence left TO;

expr_list   ::= expr_list:l expr_part:e
                | expr_part: e;
expr_part   ::= expr:e                                  {: String input = exprToString(e); Collections.sort(e); System.out.println(toJSON(input, exprToString(e))); :} END
                | expr:l TO expr:r                      {: String input = eqnToString(l, r); Collections.sort(l); Collections.sort(r); System.out.println(toJSON(input, eqnToString(l, r))); :} END
                ;
expr        ::=  NUMBER:n molecule:m STATE:s            {: RESULT=new ArrayList<String>(); RESULT.add(n.toString() + ".\\mol{" + m.toString() + "}\\state{" + s.toString() + "}"); :}
                | NUMBER:n molecule:m                   {: RESULT=new ArrayList<String>(); RESULT.add(n.toString() + ".\\mol{" + m.toString() + "}"); :}
                | molecule:m STATE:s                    {: RESULT=new ArrayList<String>(); RESULT.add("\\mol{" + m.toString() + "}\\state{" + s.toString() + "}"); :}
                | molecule:m                            {: RESULT=new ArrayList<String>(); RESULT.add("\\mol{" + m.toString() + "}"); :}
                | expr:l PLUS expr:r                    {: RESULT=new ArrayList<String>(); RESULT.addAll(l); RESULT.addAll(r); :}
                | error PLUS expr:e                     {: RESULT=new ArrayList<String>(); RESULT.add("\\error"); RESULT.addAll(e); :}
                | error                                 {: RESULT=new ArrayList<String>(); RESULT.add("\\error"); :}
                ;
group       ::= ELEMENT:e                               {: RESULT=new String(e.toString()); :}
                | ELEMENT:e NUMBER:n                    {: RESULT=new String(e.toString() + "_{" + n.toString() + "}"); :}
                | group:g CHARGE:c                      {: RESULT=new String(g.toString() + c.toString()); :}
                | LPAREN molecule:m RPAREN NUMBER:n     {: RESULT=new String("(" + m.toString() + ")" + "_{" + n.toString() + "}"); :}
                ;
molecule    ::= group:g                                 {: RESULT=new String(g.toString()); :}
                | group:g molecule:m                    {: RESULT=new String(g.toString() + "." + m.toString()); :}
                ;

