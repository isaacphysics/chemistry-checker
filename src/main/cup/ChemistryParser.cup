/**
 * Copyright 2016 James Sharkey
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 * You may obtain a copy of the License at
 * 		http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.isaacphysics.labs.chemistry.checker;

import java.util.ArrayList;


terminal END, PLUS, LPAREN, RPAREN;
terminal SingleArrow TO;
terminal DoubleArrow DTO;
terminal String STATE;
terminal Integer NUMBER, CHARGE;
terminal String ELEMENT;

non terminal ArrayList<Statement> result;
non terminal ArrayList<Statement> statement_list;
non terminal Statement statement;
non terminal Expression expr;
non terminal Term term;
non terminal Formula formula;
non terminal Ion ion;
non terminal Molecule molecule;
non terminal Element element;
non terminal Compound compound, some_eb, b;

precedence left PLUS;
precedence left TO;

start with result;


result          ::=   statement_list:l                      {: RESULT = l; :}
                    | statement_list:l END                  {: RESULT = l; :}
                    ;
statement_list  ::=   statement_list:l END statement:s      {: RESULT = l; RESULT.add(s); :}
                    | statement: s                          {: RESULT = new ArrayList<Statement>(); RESULT.add(s); :}
                    ;
statement       ::=   expr:e                                {: RESULT = new ExpressionStatement(e); :}
                    | expr:l TO:a expr:r                    {: RESULT = new EquationStatement(l, a, r); :}
                    | expr:l DTO:a expr:r                   {: RESULT = new EquationStatement(l, a, r); :}
                    ;
expr            ::=   expr:l PLUS term:r                    {: RESULT = l; RESULT.add(r); :}
                    | term:t                                {: RESULT = new Expression(t); :}
                    | expr:e PLUS error                     {: RESULT = e; RESULT.add(new ErrorTerm()); :}
                    | error                                 {: RESULT = new Expression(new ErrorTerm()); :}
                    ;
term            ::=   NUMBER:n formula:f STATE:s            {: RESULT = new Term(n, f, s); :}
                    | NUMBER:n formula:f                    {: RESULT = new Term(n, f, null); :}
                    | formula:f STATE:s                     {: RESULT = new Term(1, f, s); :}
                    | formula:f                             {: RESULT = new Term(1, f, null); :}
                    ;
formula         ::=   ion:i                                 {: RESULT = i; :}
                    | molecule:m                            {: RESULT = m; :}
                    ;
ion             ::=   molecule:m CHARGE:c                   {: RESULT = new Ion(m, c); :}
                    ;
molecule        ::=   element:e                             {: RESULT = e; :}
                    | compound:c                            {: RESULT = c; :}
                    ;
element         ::=   ELEMENT:e NUMBER:n                    {: RESULT = new Element(e, n); :}
                    | ELEMENT:e                             {: RESULT = new Element(e, 1); :}
                    ;
compound        ::=   b:b some_eb:eb                        {: RESULT = b; RESULT.addCompound(eb); :}
                    | element:e1 element:e2 some_eb:eb      {: RESULT = new Compound(e1); RESULT.add(e2);
                                                               RESULT.addCompound(eb); :}
                    | element:e b:b some_eb:eb              {: RESULT = new Compound(e); RESULT.add(b);
                                                               RESULT.addCompound(eb); :}
                    ;
some_eb         ::=                                         {: RESULT = new Compound(null); :}
                    | some_eb:e element:elem                {: RESULT = e; RESULT.add(elem); :}
                    | some_eb:e b:b                         {: RESULT = e; RESULT.add(b); :}
                    ;
b               ::=   LPAREN compound:c RPAREN NUMBER:n     {: RESULT = c; RESULT.setNumber(n); :}
                    ;
