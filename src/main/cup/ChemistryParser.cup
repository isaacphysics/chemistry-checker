/**
 * Copyright 2016 James Sharkey
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 * You may obtain a copy of the License at
 * 		http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.isaacphysics.labs.chemistry.checker;

import java.util.ArrayList;


terminal END, PLUS, TO, LPAREN, RPAREN;
terminal String STATE, CHARGE;
terminal Integer NUMBER;
terminal String ELEMENT;

non terminal ArrayList<Statement> result;
non terminal ArrayList<Statement> statement_list;
non terminal Statement statement;
non terminal Expression expr;
non terminal Term term;
non terminal Molecule molecule;
non terminal Group group;

precedence left PLUS;
precedence left TO;


result      ::= statement_list:l                        {: RESULT=new ArrayList<Statement>(l); :}
                | expr:e                                {: RESULT=new ArrayList<Statement>(); RESULT.add(new ExpressionStatement(e)); :}
                | expr:l TO expr:r                      {: RESULT=new ArrayList<Statement>(); RESULT.add(new EquationStatement(l, r)); :}
                ;
statement_list  ::= statement_list:l statement:s        {: RESULT=new ArrayList<Statement>(l); RESULT.add(s); :}
                | statement: s                          {: RESULT=new ArrayList<Statement>(); RESULT.add(s); :}
                ;
statement   ::= expr:e END                              {: RESULT=new ExpressionStatement(e); :}
                | expr:l TO expr:r END                  {: RESULT=new EquationStatement(l, r); :}
                ;
expr        ::=  expr:l PLUS term:r                     {: RESULT=new Expression(l, r); :}
                | term:t                                {: RESULT=new Expression(t); :}
                | expr:e PLUS error                     {: RESULT=new Expression(e, new ErrorTerm()); :}
                | error                                 {: RESULT=new Expression(new ErrorTerm()); :}
                ;
term        ::=  NUMBER:n molecule:m STATE:s            {: RESULT=new Term(n, m, s); :}
                | NUMBER:n molecule:m                   {: RESULT=new Term(n, m); :}
                | molecule:m STATE:s                    {: RESULT=new Term(m, s); :}
                | molecule:m                            {: RESULT=new Term(m); :}
                ;
molecule    ::= group:g                                 {: RESULT=new Molecule(g); :}
                | molecule:m group:g                    {: RESULT=new Molecule(m, g); :}
                ;
group       ::= ELEMENT:e                               {: RESULT=new Group(e, 1); :}
                | ELEMENT:e NUMBER:n                    {: RESULT=new Group(e, n); :}
                | ELEMENT:e CHARGE:c NUMBER:n           {: RESULT=new Group(e, n, c, true); :}
                | ELEMENT:e NUMBER:n CHARGE:c           {: RESULT=new Group(e, n, c, false); :}
                | ELEMENT:e CHARGE:c                    {: RESULT=new Group(e, 1, c, false); :}
                | LPAREN molecule:m RPAREN NUMBER:n     {: RESULT=new Group(m, n); :}
                ;

