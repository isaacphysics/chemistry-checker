/**
 * Copyright 2016 James Sharkey
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 * You may obtain a copy of the License at
 * 		http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.isaacphysics.labs.chemistry.checker;

import java.util.ArrayList;


terminal END, PLUS, MINUS, LPAREN, RPAREN;
terminal SingleArrow TO;
terminal DoubleArrow DTO;
terminal String STATE, ERROR;
terminal Integer NUMBER, CHARGE, SUP, SUB, WATER;
terminal String ELEMENT;
terminal ChemicalElectron C_ELECTRON;
terminal Nuclear ALPHA, BETA, GAMMA, NEUTRINO, P_ELECTRON, POSITRON;

non terminal ArrayList<Statement> result;
non terminal ArrayList<Statement> statement_list;
non terminal Statement statement;
non terminal Expression expr, n_expr, terms, n_terms;
non terminal Term term, n_term, end_term, n_end_term;
non terminal Isotope isotope, isotope_mod;
non terminal Molecule molecule;
non terminal Element element;
non terminal Compound compound, some_eb, b;
non terminal Nuclear nuclear;
non terminal Integer opt_number, charge;
non terminal String opt_state;

start with result;


result          ::=   statement_list:l                      {: RESULT = l; :}
                    | statement_list:l END                  {: RESULT = l; :}
                    ;
statement_list  ::=   statement_list:l END statement:s      {: RESULT = l; RESULT.add(s); :}
                    | statement:s                           {: RESULT = new ArrayList<Statement>(); RESULT.add(s); :}
                    ;
statement       ::=   expr:e                                {: RESULT = new ExpressionStatement(e); :}
                    | n_expr:e                              {: RESULT = new NuclearExpressionStatement(e); :}
                    | expr:l TO:a expr:r                    {: RESULT = new EquationStatement(l, a, r); :}
                    | expr:l DTO:a expr:r                   {: RESULT = new EquationStatement(l, a, r); :}
                    | n_expr:l TO:a n_expr:r                {: RESULT = new NuclearEquationStatement(l, r); :}
                    ;
expr            ::=   terms:e end_term:t                    {: RESULT = e; RESULT.add(t); :}
                    | end_term:t                            {: RESULT = new Expression(t); :}
                    | error                                 {: RESULT = new Expression(new ErrorTerm()); :}
                    ;
terms           ::=   terms:e term:t                        {: RESULT = e; RESULT.add(t); :}
                    | term:t                                {: RESULT = new Expression(t); :}
                    | error                                 {: RESULT = new Expression(new ErrorTerm()); :}
                    ;
term            ::=   opt_number:n molecule:m charge:c opt_state:s PLUS
                                                            {: RESULT = new Term(n, new Ion(m, c), s); :}
                    | opt_number:n molecule:m PLUS
                                                            {: RESULT = new Term(n, m, null); :}
                    | opt_number:n molecule:m STATE:s PLUS  {: RESULT = new Term(n, m, s); :}
                    | opt_number:n compound:c WATER:w opt_state:s PLUS
                                                            {: RESULT = new Term(n, new Hydrate(c, w), s); :}
                    | opt_number:n C_ELECTRON:e PLUS        {: RESULT = new Term(n, e, null); :}
                    ;
end_term        ::=   opt_number:n molecule:m charge:c opt_state:s
                                                            {: RESULT = new Term(n, new Ion(m, c), s); :}
                    | opt_number:n molecule:m opt_state:s
                                                            {: RESULT = new Term(n, m, s); :}
                    | opt_number:n compound:c WATER:w opt_state:s
                                                            {: RESULT = new Term(n, new Hydrate(c, w), s); :}
                    | opt_number:n C_ELECTRON:e             {: RESULT = new Term(n, e, null); :}
                    ;
n_expr          ::=   n_terms:e n_end_term:t                {: RESULT = e; RESULT.add(t); :}
                    | n_end_term:t                          {: RESULT = new Expression(t); :}
                    ;
n_terms         ::=   n_terms:e n_term:t                    {: RESULT = e; RESULT.add(t); :}
                    | n_terms:e error                       {: RESULT = e; RESULT.add(new ErrorTerm()); :}
                    | n_term:t                              {: RESULT = new Expression(t); :}
                    ;
n_term          ::=   isotope:i                             {: RESULT = new Term(1, i, null); :}
                    | opt_number:n nuclear:e PLUS           {: RESULT = new Term(n, e, null); :}
                    ;
isotope         ::=   SUP:sup SUB:sub ELEMENT:e PLUS        {: RESULT = new Isotope(sup, sub, new Element(e, 1)); :}
                    | SUB:sub SUP:sup ELEMENT:e PLUS        {: RESULT = new Isotope(sup, sub, new Element(e, 1)); :}
                    | SUP:sup SUB:sub ELEMENT:e charge:c PLUS
                                                            {: RESULT = new Isotope(sup, sub,
                                                                                    new Ion(new Element(e, 1), c)); :}
                    | SUB:sub SUP:sup ELEMENT:e charge:c PLUS
                                                            {: RESULT = new Isotope(sup, sub,
                                                                                    new Ion(new Element(e, 1), c)); :}
                    ;
n_end_term      ::=   isotope_mod:i                         {: RESULT = new Term(1, i, null); :}
                    | opt_number:n nuclear:e                {: RESULT = new Term(n, e, null); :}
                    ;
isotope_mod     ::=   SUP:sup SUB:sub ELEMENT:e             {: RESULT = new Isotope(sup, sub, new Element(e, 1)); :}
                    | SUB:sub SUP:sup ELEMENT:e             {: RESULT = new Isotope(sup, sub, new Element(e, 1)); :}
                    | SUP:sup SUB:sub ELEMENT:e charge:c    {: RESULT = new Isotope(sup, sub,
                                                                                    new Ion(new Element(e, 1), c)); :}
                    | SUB:sub SUP:sup ELEMENT:e charge:c    {: RESULT = new Isotope(sup, sub,
                                                                                    new Ion(new Element(e, 1), c)); :}
                    ;
nuclear         ::=   ALPHA:e                               {: RESULT = e; :}
                    | BETA:e                                {: RESULT = e; :}
                    | GAMMA:e                               {: RESULT = e; :}
                    | NEUTRINO:e                            {: RESULT = e; :}
                    | P_ELECTRON:e                          {: RESULT = e; :}
                    | POSITRON:e                            {: RESULT = e; :}
                    ;
molecule        ::=   element:e                             {: RESULT = e; :}
                    | compound:c                            {: RESULT = c; :}
                    ;
element         ::=   ELEMENT:e opt_number:n                {: RESULT = new Element(e, n); :}
                    | ELEMENT:e SUB:n                       {: RESULT = new Element(e, n); :}
                    ;
compound        ::=   b:b some_eb:eb                        {: RESULT = new Compound(b); RESULT.addCompound(eb); :}
                    | element:e1 element:e2 some_eb:eb      {: RESULT = new Compound(e1); RESULT.add(e2);
                                                               RESULT.addCompound(eb); :}
                    | element:e b:b some_eb:eb              {: RESULT = new Compound(e); RESULT.add(b);
                                                               RESULT.addCompound(eb); :}
                    ;
some_eb         ::=                                         {: RESULT = new Compound(null); :}
                    | some_eb:e element:elem                {: RESULT = e; RESULT.add(elem); :}
                    | some_eb:e b:b                         {: RESULT = e; RESULT.add(b); :}
                    ;
b               ::=   LPAREN compound:c RPAREN NUMBER:n     {: RESULT = c; RESULT.setNumber(n); :}
                    ;

opt_number      ::=   NUMBER:n                              {: RESULT = n; :}
                    |                                       {: RESULT = 1; :}
                    ;
opt_state       ::=   STATE:s                               {: RESULT = s; :}
                    |                                       {: RESULT = null; :}
                    ;
charge          ::=   CHARGE:c                              {: RESULT = c; :}
                    | PLUS                                  {: RESULT = 1; :}
                    | MINUS                                 {: RESULT = -1; :}
                    ;

